"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamDeckGen2Base = void 0;
const util_1 = require("../util");
const base_1 = require("./base");
/**
 * Base class for generation 2 hardware (starting with the xl)
 */
class StreamDeckGen2Base extends base_1.StreamDeckBase {
    constructor(device, options, properties, disableXYFlip) {
        super(device, options, properties);
        this.encodeJPEG = options.encodeJPEG;
        this.xyFlip = !disableXYFlip;
    }
    /**
     * Sets the brightness of the keys on the Stream Deck
     *
     * @param {number} percentage The percentage brightness
     */
    async setBrightness(percentage) {
        if (percentage < 0 || percentage > 100) {
            throw new RangeError('Expected brightness percentage to be between 0 and 100');
        }
        // prettier-ignore
        const brightnessCommandBuffer = Buffer.from([
            0x03,
            0x08, percentage, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ]);
        await this.device.sendFeatureReport(brightnessCommandBuffer);
    }
    async resetToLogo() {
        // prettier-ignore
        const resetCommandBuffer = Buffer.from([
            0x03,
            0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ]);
        await this.device.sendFeatureReport(resetCommandBuffer);
    }
    async getFirmwareVersion() {
        const val = await this.device.getFeatureReport(5, 32);
        const end = val.indexOf(0);
        return val.toString('ascii', 6, end === -1 ? undefined : end);
    }
    async getSerialNumber() {
        const val = await this.device.getFeatureReport(6, 32);
        return val.toString('ascii', 2, 14);
    }
    getFillImageCommandHeaderLength() {
        return 8;
    }
    writeFillImageCommandHeader(buffer, keyIndex, partIndex, isLast, bodyLength) {
        buffer.writeUInt8(0x02, 0);
        buffer.writeUInt8(0x07, 1);
        buffer.writeUInt8(keyIndex, 2);
        buffer.writeUInt8(isLast ? 1 : 0, 3);
        buffer.writeUInt16LE(bodyLength, 4);
        buffer.writeUInt16LE(partIndex++, 6);
    }
    getFillImagePacketLength() {
        return 1024;
    }
    async convertFillImage(sourceBuffer, sourceOptions) {
        const byteBuffer = (0, util_1.imageToByteArray)(sourceBuffer, sourceOptions, { colorMode: 'rgba', xFlip: this.xyFlip, yFlip: this.xyFlip }, 0, this.ICON_SIZE);
        return this.encodeJPEG(byteBuffer, this.ICON_SIZE, this.ICON_SIZE);
    }
}
exports.StreamDeckGen2Base = StreamDeckGen2Base;
//# sourceMappingURL=base-gen2.js.map