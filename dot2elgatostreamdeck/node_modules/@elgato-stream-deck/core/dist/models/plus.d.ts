/// <reference types="node" />
import { FillImageOptions, FillLcdImageOptions, LcdSegmentSize } from '../types';
import { HIDDevice } from '../device';
import { OpenStreamDeckOptions } from './base';
import { StreamDeckGen2Base } from './base-gen2';
import { EncoderIndex } from '../id';
export declare class StreamDeckPlus extends StreamDeckGen2Base {
    #private;
    constructor(device: HIDDevice, options: Required<OpenStreamDeckOptions>);
    get NUM_ENCODERS(): number;
    get LCD_STRIP_SIZE(): LcdSegmentSize;
    get LCD_ENCODER_SIZE(): LcdSegmentSize;
    private calculateEncoderForX;
    protected handleInputBuffer(data: Uint8Array): void;
    private handleLcdInput;
    private handleEncoderInput;
    clearPanel(): Promise<void>;
    fillEncoderLcd(index: EncoderIndex, buffer: Buffer, sourceOptions: FillImageOptions): Promise<void>;
    fillLcdRegion(x: number, y: number, imageBuffer: Buffer, sourceOptions: FillLcdImageOptions): Promise<void>;
    private convertFillLcdBuffer;
    private generateFillLcdWrites;
}
//# sourceMappingURL=plus.d.ts.map