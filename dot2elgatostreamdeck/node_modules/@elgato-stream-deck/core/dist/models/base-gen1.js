"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamDeckGen1Base = void 0;
const base_1 = require("./base");
/**
 * Base class for generation 1 hardware (before the xl)
 */
class StreamDeckGen1Base extends base_1.StreamDeckBase {
    constructor(device, options, properties) {
        super(device, options, properties);
    }
    /**
     * Sets the brightness of the keys on the Stream Deck
     *
     * @param {number} percentage The percentage brightness
     */
    async setBrightness(percentage) {
        if (percentage < 0 || percentage > 100) {
            throw new RangeError('Expected brightness percentage to be between 0 and 100');
        }
        // prettier-ignore
        const brightnessCommandBuffer = Buffer.from([
            0x05,
            0x55, 0xaa, 0xd1, 0x01, percentage, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ]);
        await this.device.sendFeatureReport(brightnessCommandBuffer);
    }
    async resetToLogo() {
        // prettier-ignore
        const resetCommandBuffer = Buffer.from([
            0x0b,
            0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ]);
        await this.device.sendFeatureReport(resetCommandBuffer);
    }
    async getFirmwareVersion() {
        const val = await this.device.getFeatureReport(4, 17);
        const end = val.indexOf(0);
        return val.toString('ascii', 5, end === -1 ? undefined : end);
    }
    async getSerialNumber() {
        const val = await this.device.getFeatureReport(3, 17);
        return val.toString('ascii', 5, 17);
    }
}
exports.StreamDeckGen1Base = StreamDeckGen1Base;
//# sourceMappingURL=base-gen1.js.map