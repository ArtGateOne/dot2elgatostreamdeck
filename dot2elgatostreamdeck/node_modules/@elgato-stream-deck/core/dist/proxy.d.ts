/// <reference types="node" />
import * as EventEmitter from 'eventemitter3';
import { DeviceModelId, EncoderIndex, KeyIndex } from './id';
import { StreamDeck, FillImageOptions, FillPanelOptions } from './types';
import { FillLcdImageOptions, LcdSegmentSize, StreamDeckEvents } from './types';
/**
 * A minimal proxy around a StreamDeck instance.
 * This is intended to be used by libraries wrapping this that want to add more methods to the StreamDeck
 */
export declare class StreamDeckProxy implements StreamDeck {
    protected device: StreamDeck;
    constructor(device: StreamDeck);
    get NUM_KEYS(): number;
    get KEY_COLUMNS(): number;
    get KEY_ROWS(): number;
    get NUM_ENCODERS(): number;
    get LCD_STRIP_SIZE(): LcdSegmentSize | undefined;
    get LCD_ENCODER_SIZE(): LcdSegmentSize | undefined;
    get ICON_SIZE(): number;
    get ICON_BYTES(): number;
    get ICON_PIXELS(): number;
    get MODEL(): DeviceModelId;
    get PRODUCT_NAME(): string;
    checkValidKeyIndex(keyIndex: KeyIndex): void;
    close(): Promise<void>;
    fillKeyColor(keyIndex: KeyIndex, r: number, g: number, b: number): Promise<void>;
    fillKeyBuffer(keyIndex: KeyIndex, imageBuffer: Buffer, options?: FillImageOptions): Promise<void>;
    fillPanelBuffer(imageBuffer: Buffer, options?: FillPanelOptions): Promise<void>;
    clearKey(keyIndex: KeyIndex): Promise<void>;
    clearPanel(): Promise<void>;
    setBrightness(percentage: number): Promise<void>;
    resetToLogo(): Promise<void>;
    getFirmwareVersion(): Promise<string>;
    getSerialNumber(): Promise<string>;
    fillEncoderLcd(index: EncoderIndex, imageBuffer: Buffer, sourceOptions: FillImageOptions): Promise<void>;
    fillLcdRegion(x: number, y: number, imageBuffer: Buffer, sourceOptions: FillLcdImageOptions): Promise<void>;
    /**
     * EventEmitter
     */
    eventNames(): Array<EventEmitter.EventNames<StreamDeckEvents>>;
    listeners<T extends EventEmitter.EventNames<StreamDeckEvents>>(event: T): Array<EventEmitter.EventListener<StreamDeckEvents, T>>;
    listenerCount(event: EventEmitter.EventNames<StreamDeckEvents>): number;
    emit<T extends EventEmitter.EventNames<StreamDeckEvents>>(event: T, ...args: EventEmitter.EventArgs<StreamDeckEvents, T>): boolean;
    /**
     * Add a listener for a given event.
     */
    on<T extends EventEmitter.EventNames<StreamDeckEvents>>(event: T, fn: EventEmitter.EventListener<StreamDeckEvents, T>, context?: unknown): this;
    addListener<T extends EventEmitter.EventNames<StreamDeckEvents>>(event: T, fn: EventEmitter.EventListener<StreamDeckEvents, T>, context?: unknown): this;
    /**
     * Add a one-time listener for a given event.
     */
    once<T extends EventEmitter.EventNames<StreamDeckEvents>>(event: T, fn: EventEmitter.EventListener<StreamDeckEvents, T>, context?: unknown): this;
    /**
     * Remove the listeners of a given event.
     */
    removeListener<T extends EventEmitter.EventNames<StreamDeckEvents>>(event: T, fn?: EventEmitter.EventListener<StreamDeckEvents, T>, context?: unknown, once?: boolean): this;
    off<T extends EventEmitter.EventNames<StreamDeckEvents>>(event: T, fn?: EventEmitter.EventListener<StreamDeckEvents, T>, context?: unknown, once?: boolean): this;
    removeAllListeners(event?: EventEmitter.EventNames<StreamDeckEvents>): this;
}
//# sourceMappingURL=proxy.d.ts.map