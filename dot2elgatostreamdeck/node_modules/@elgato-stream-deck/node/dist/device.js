"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeHIDDevice = void 0;
const events_1 = require("events");
const HID = require("node-hid");
/**
 * The wrapped node-hid HIDDevice.
 * This translates it into the common format expected by @elgato-stream-deck/core
 */
class NodeHIDDevice extends events_1.EventEmitter {
    constructor(deviceInfo) {
        super();
        this.device = new HID.HID(deviceInfo.path);
        this.device.on('error', (error) => this.emit('error', error));
        this.device.on('data', (data) => {
            // Button press
            if (data[0] === 0x01) {
                const keyData = data.subarray(1);
                this.emit('input', keyData);
            }
        });
    }
    async close() {
        this.device.close();
    }
    async sendFeatureReport(data) {
        this.device.sendFeatureReport(data);
    }
    async getFeatureReport(reportId, reportLength) {
        return Buffer.from(this.device.getFeatureReport(reportId, reportLength));
    }
    async sendReports(buffers) {
        for (const data of buffers) {
            this.device.write(data);
        }
    }
}
exports.NodeHIDDevice = NodeHIDDevice;
//# sourceMappingURL=device.js.map